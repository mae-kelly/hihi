"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useVisibilityData.ts":
/*!****************************************!*\
  !*** ./src/hooks/useVisibilityData.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatNumber: function() { return /* binding */ formatNumber; },\n/* harmony export */   getStatusColor: function() { return /* binding */ getStatusColor; },\n/* harmony export */   getVisibilityColor: function() { return /* binding */ getVisibilityColor; },\n/* harmony export */   usePageVisibility: function() { return /* binding */ usePageVisibility; },\n/* harmony export */   useVisibilityMetrics: function() { return /* binding */ useVisibilityMetrics; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst useVisibilityMetrics = ()=>{\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchMetrics = async ()=>{\n            try {\n                setLoading(true);\n                // Fetch all visibility endpoints in parallel\n                const endpoints = [\n                    \"global_visibility\",\n                    \"infrastructure_visibility\",\n                    \"regional_visibility\",\n                    \"business_unit_visibility\",\n                    \"system_classification_visibility\",\n                    \"security_control_coverage\",\n                    \"logging_compliance\",\n                    \"domain_visibility\"\n                ];\n                const responses = await Promise.all(endpoints.map((endpoint)=>fetch(\"http://localhost:5000/api/\".concat(endpoint)).then((res)=>res.json()).catch((err)=>{\n                        console.error(\"Error fetching \".concat(endpoint, \":\"), err);\n                        return null;\n                    })));\n                const [global, infra, regional, bu, system, security, logging, domain] = responses;\n                // Process each response into standardized format\n                const processedData = {};\n                if (global) {\n                    processedData.global = {\n                        percentage: global.global_visibility_percentage || 0,\n                        total: global.total_hosts || 0,\n                        visible: global.visible_hosts || 0,\n                        invisible: global.invisible_hosts || 0,\n                        status: global.status || \"CRITICAL\"\n                    };\n                }\n                if (infra) {\n                    processedData.infrastructure = {\n                        percentage: infra.overall_infrastructure_visibility || 0,\n                        total: infra.total_infrastructure_types || 0,\n                        visible: infra.category_summary ? Object.values(infra.category_summary).filter((c)=>c.visibility_percentage > 50).length : 0,\n                        invisible: infra.critical_gaps ? infra.critical_gaps.length : 0,\n                        status: infra.overall_infrastructure_visibility < 30 ? \"CRITICAL\" : infra.overall_infrastructure_visibility < 70 ? \"WARNING\" : \"HEALTHY\"\n                    };\n                }\n                if (regional) {\n                    const avgVisibility = regional.regional_breakdown ? regional.regional_breakdown.reduce((sum, r)=>sum + r.visibility_percentage, 0) / regional.regional_breakdown.length : 0;\n                    processedData.regional = {\n                        percentage: avgVisibility,\n                        total: regional.regional_breakdown ? regional.regional_breakdown.length : 0,\n                        visible: regional.regional_breakdown ? regional.regional_breakdown.filter((r)=>r.visibility_percentage > 50).length : 0,\n                        invisible: regional.regional_breakdown ? regional.regional_breakdown.filter((r)=>r.visibility_percentage <= 50).length : 0,\n                        status: avgVisibility < 40 ? \"CRITICAL\" : avgVisibility < 70 ? \"WARNING\" : \"HEALTHY\"\n                    };\n                }\n                if (bu) {\n                    const avgVisibility = bu.business_unit_breakdown ? bu.business_unit_breakdown.reduce((sum, b)=>sum + b.visibility_percentage, 0) / bu.business_unit_breakdown.length : 0;\n                    processedData.businessUnit = {\n                        percentage: avgVisibility,\n                        total: bu.business_unit_breakdown ? bu.business_unit_breakdown.length : 0,\n                        visible: bu.business_unit_breakdown ? bu.business_unit_breakdown.filter((b)=>b.visibility_percentage > 50).length : 0,\n                        invisible: bu.business_unit_breakdown ? bu.business_unit_breakdown.filter((b)=>b.visibility_percentage <= 50).length : 0,\n                        status: avgVisibility < 40 ? \"CRITICAL\" : avgVisibility < 70 ? \"WARNING\" : \"HEALTHY\"\n                    };\n                }\n                if (system) {\n                    const avgVisibility = system.category_summary ? Object.values(system.category_summary).reduce((sum, s)=>sum + s.visibility_percentage, 0) / Object.keys(system.category_summary).length : 0;\n                    processedData.system = {\n                        percentage: avgVisibility,\n                        total: system.total_system_types || 0,\n                        visible: system.critical_systems ? system.total_system_types - system.critical_systems.length : 0,\n                        invisible: system.critical_systems ? system.critical_systems.length : 0,\n                        status: avgVisibility < 40 ? \"CRITICAL\" : avgVisibility < 70 ? \"WARNING\" : \"HEALTHY\"\n                    };\n                }\n                if (security) {\n                    var _security_all_controls_coverage;\n                    processedData.security = {\n                        percentage: security.all_controls_coverage ? security.all_controls_coverage.coverage_percentage : 0,\n                        total: security.total_hosts || 0,\n                        visible: security.all_controls_coverage ? security.all_controls_coverage.fully_protected_hosts : 0,\n                        invisible: security.all_controls_coverage ? security.all_controls_coverage.partially_protected_hosts : 0,\n                        status: ((_security_all_controls_coverage = security.all_controls_coverage) === null || _security_all_controls_coverage === void 0 ? void 0 : _security_all_controls_coverage.status) || \"CRITICAL\"\n                    };\n                }\n                if (logging) {\n                    var _logging_combined_compliance;\n                    processedData.logging = {\n                        percentage: logging.combined_compliance ? logging.combined_compliance.either_platform.percentage : 0,\n                        total: logging.total_hosts || 0,\n                        visible: logging.combined_compliance ? logging.combined_compliance.either_platform.host_count : 0,\n                        invisible: logging.combined_compliance ? logging.combined_compliance.neither_platform.host_count : 0,\n                        status: ((_logging_combined_compliance = logging.combined_compliance) === null || _logging_combined_compliance === void 0 ? void 0 : _logging_combined_compliance.overall_status) || \"CRITICAL\"\n                    };\n                }\n                if (domain) {\n                    processedData.domain = {\n                        percentage: domain.overall_domain_visibility || 0,\n                        total: domain.total_domains || 0,\n                        visible: domain.critical_domains ? domain.total_domains - domain.critical_domains.length : domain.total_domains,\n                        invisible: domain.critical_domains ? domain.critical_domains.length : 0,\n                        status: domain.overall_domain_visibility < 40 ? \"CRITICAL\" : domain.overall_domain_visibility < 70 ? \"WARNING\" : \"HEALTHY\"\n                    };\n                }\n                // Calculate overall visibility\n                const visibilityValues = Object.values(processedData).filter((d)=>d && typeof d.percentage === \"number\").map((d)=>d.percentage);\n                if (visibilityValues.length > 0) {\n                    processedData.overall = visibilityValues.reduce((sum, v)=>sum + v, 0) / visibilityValues.length;\n                    processedData.criticalCount = Object.values(processedData).filter((d)=>d && d.status === \"CRITICAL\").length;\n                }\n                setData(processedData);\n                setError(null);\n            } catch (err) {\n                setError(err instanceof Error ? err.message : \"Failed to fetch visibility metrics\");\n            } finally{\n                setLoading(false);\n            }\n        };\n        fetchMetrics();\n        const interval = setInterval(fetchMetrics, 30000); // Refresh every 30 seconds\n        return ()=>clearInterval(interval);\n    }, []);\n    return {\n        data,\n        loading,\n        error\n    };\n};\n// Hook for individual page metrics\nconst usePageVisibility = (page)=>{\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchData = async ()=>{\n            try {\n                setLoading(true);\n                const endpointMap = {\n                    \"global\": \"global_visibility\",\n                    \"infrastructure\": \"infrastructure_visibility\",\n                    \"regional\": \"regional_visibility\",\n                    \"business-unit\": \"business_unit_visibility\",\n                    \"system\": \"system_classification_visibility\",\n                    \"security\": \"security_control_coverage\",\n                    \"logging\": \"logging_compliance\",\n                    \"domain\": \"domain_visibility\"\n                };\n                const endpoint = endpointMap[page];\n                if (!endpoint) {\n                    throw new Error(\"Unknown page: \".concat(page));\n                }\n                const response = await fetch(\"http://localhost:5000/api/\".concat(endpoint));\n                if (!response.ok) {\n                    throw new Error(\"Failed to fetch \".concat(endpoint));\n                }\n                const result = await response.json();\n                setData(result);\n                setError(null);\n            } catch (err) {\n                setError(err instanceof Error ? err.message : \"Failed to fetch data\");\n            } finally{\n                setLoading(false);\n            }\n        };\n        fetchData();\n        const interval = setInterval(fetchData, 30000);\n        return ()=>clearInterval(interval);\n    }, [\n        page\n    ]);\n    return {\n        data,\n        loading,\n        error\n    };\n};\n// Export utility functions\nconst getVisibilityColor = (percentage)=>{\n    if (percentage >= 80) return \"#00d4ff\"; // cyan\n    if (percentage >= 50) return \"#c084fc\"; // purple\n    return \"#ff00ff\"; // pink\n};\nconst getStatusColor = (status)=>{\n    switch(status.toUpperCase()){\n        case \"HEALTHY\":\n            return \"#00d4ff\";\n        case \"WARNING\":\n            return \"#c084fc\";\n        case \"CRITICAL\":\n            return \"#ff00ff\";\n        default:\n            return \"#ffffff\";\n    }\n};\nconst formatNumber = (num)=>{\n    if (num >= 1000000) {\n        return (num / 1000000).toFixed(1) + \"M\";\n    }\n    if (num >= 1000) {\n        return (num / 1000).toFixed(1) + \"K\";\n    }\n    return num.toString();\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useVisibilityData.ts\n"));

/***/ })

});